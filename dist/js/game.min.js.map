{"version":3,"sources":["dist/js/game.js"],"names":["gameInit1","$g","$","tiles","pool","drop","height","margin","gutter","$main","scale","getBoundingClientRect","width","offsetWidth","$hint","changeZone","tile","zone","data","rect1","rect2","append","TweenLite","set","x","left","y","top","getZone","Draggable","hitTest","target","tile1","tile2","each","i","element","insertBefore","insertAfter","reorderTiles","dragging","query","children","moveTile","index","tween","hasClass","addClass","to","onComplete","removeClass","create","bounds","onDrag","event","this","endDrag","startDrag","onDragEnd","onDragStart","onPress","opacity","TweenMax","transformOrigin","rotation","ease","Power1","easeInOut","fromTo","repeat","yoyo","onRelease","overwrite","length","setTimeout","game2","on","$gameHint","Power2","gameInit2","$class","attr","inArray","Solution","eq","game3","tangram","drag","$drag","$drop","startX","offset","startY","endX","endY","diffX","diffY","$t","checkSolutionGame3","staggerTo","Power3","endGame3","game4","blob2","Blob","radius","strokeStyle","end","document","getElementById","init2","canvas","createElement","setAttribute","appendChild","resize","window","innerWidth","innerHeight","addEventListener","oldMousePoint","hover","e","pos","center","diff","clientX","clientY","dist","Math","sqrt","angle","mousePos","color","vector","atan2","_vector","nearestPoint","distanceFromPoint","points","forEach","point","abs","azimuth","strength","acceleration","init","render"],"mappings":"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","file":"game.min.js","sourcesContent":["/*--------------------------------------------------\nGame init 1\n--------------------------------------------------*/\nfunction gameInit1() {\n    var $g = $('#game-1'),\n        tiles = $('.tile', $g),\n        pool = $('#pool', $g),\n        drop = $('#drop', $g),\n        height = 110,\n        margin = 0,\n        gutter = 50,\n        $main = $('main', $g),\n        scale = $main[0].getBoundingClientRect().width / $main[0].offsetWidth,\n        $hint = $('.hint img', $g);\n\n    tiles.each(function (i, tile) {\n\n        // Setup tiles with some data\n        tile = $(tile);\n        tile.data({\n            index: i,\n            zone: pool\n        });\n\n        TweenLite.set(tile, {\n            x: margin,\n            y: margin + i * gutter + (i * height)\n        });\n    });\n\n    // Make tiles draggable\n    Draggable.create(tiles, {\n        bounds: $g,\n        onDrag: onDrag,\n        onDragEnd: onDragEnd,\n        onDragStart: onDragStart,\n        onPress: onPress,\n        onRelease: onRelease\n    });\n\n    function onDrag(event) {\n\n        var tile = $(this.target);\n        var zone = getZone(tile);\n\n        // Tile is not in the zone it started from\n        if (zone && zone !== tile.data(\"zone\")) {\n\n            // Stop the draggable so the position doesn't\n            // get messed up when appeneding tile to new zone\n            this.endDrag(event);\n            changeZone(tile, zone);\n            this.startDrag(event);\n        }\n\n        // Reorder tiles. True parameter tells it to ignore \n        // tiles that are being dragged\n        if (!zone) reorderTiles(true);\n        if (hitTest(tile)) reorderTiles();\n    }\n\n    function onDragStart() {\n        $(this.target).addClass(\"dragging\");\n    }\n\n    function onDragEnd() {\n\n        var tile = $(this.target);\n        var zone = getZone(tile);\n\n        if (zone && zone !== tile.data(\"zone\")) {\n            changeZone(tile, zone);\n        }\n\n        $(this.target).removeClass(\"dragging\");\n        hitTest(this.target);\n        reorderTiles();\n    }\n\n    function onPress() {\n        TweenLite.to(this.target, 0.3, {\n            opacity: 0.75,\n            scale: 1.1\n        });\n        TweenMax.to(this.target, 0.2, {\n            transformOrigin: \"50%\",\n            rotation: 4,\n            ease: Power1.easeInOut,\n            onComplete: function () {\n                TweenMax.fromTo(\n                    this.target,\n                    0.4, {\n                        transformOrigin: \"50%\",\n                        rotation: 4,\n                        ease: Power1.easeInOut\n                    }, {\n                        transformOrigin: \"50%\",\n                        rotation: -4,\n                        repeat: -1,\n                        ease: Power1.easeInOut,\n                        yoyo: true\n                    }\n                );\n            }\n        });\n    }\n\n    function onRelease() {\n        hitTest(this.target);\n        reorderTiles();\n        TweenLite.to(this.target, 0.3, {\n            overwrite: 'all',\n            opacity: 1,\n            scale: 1,\n            rotation: 0\n        });\n\n        checkSolution();\n    }\n\n    function changeZone(tile, zone) {\n\n        // Change tile's data for zone\n        tile.data(\"zone\", zone);\n\n        // Find position of tile and zone\n        var rect1 = tile[0].getBoundingClientRect();\n        var rect2 = zone[0].getBoundingClientRect();\n\n        zone.append(tile);\n\n        // Update tile with new coords\n        TweenLite.set(tile, {\n            x: (rect1.left - rect2.left) / scale,\n            y: (rect1.top - rect2.top) / scale\n        });\n    }\n\n    function getZone(tile) {\n\n        // Returns the zone the tile is in\n        var zone = Draggable.hitTest(tile, pool) ?\n            pool : Draggable.hitTest(tile, drop) ?\n            drop : null;\n        return zone;\n    }\n\n    function hitTest(tile) {\n\n        var target;\n\n        // Hit test tiles that aren't moving or being dragged\n        $(\".tile:not(.dragging, .moving)\").each(function (i, element) {\n\n            if (Draggable.hitTest(tile, element)) {\n                target = element;\n                return false;\n            }\n        });\n\n        if (target) changePosition(tile, target);\n        return target;\n    }\n\n    function reorderTiles(dragging) {\n\n        var query = dragging ? \".tile:not(.dragging)\" : \".tile\";\n        pool.children(query).each(moveTile);\n        drop.children(query).each(moveTile);\n    }\n\n    function moveTile(index, tile, tween) {\n\n        tile = $(tile);\n        tile.data(\"index\", index);\n\n        if (tile.hasClass(\"dragging\")) return;\n        tile.addClass(\"moving\");\n\n        TweenLite.to(tile, 0.25, {\n            x: margin,\n            y: margin + index * gutter + (index * height),\n            onComplete: function () {\n                tile.removeClass(\"moving\");\n            }\n        });\n    }\n\n    function changePosition(tile1, tile2) {\n\n        tile1 = $(tile1);\n        tile2 = $(tile2);\n\n        // Changes tiles position on the DOM which is used to \n        // index and find the position to move to\n        tile1.data(\"index\") > tile2.data(\"index\") ?\n            tile1.insertBefore(tile2) :\n            tile1.insertAfter(tile2);\n    }\n\n    var end = false;\n\n    function checkSolution() {\n        if ($('#drop img', $g).length == 3) {\n            end = true;\n            setTimeout(function () {\n                $('#item-1 .well-done').addClass('active');\n            }, 500);\n            setTimeout(game2, 2500);\n        } else {\n            end = false;\n        }\n    }\n\n    $hint.on('click', function () {\n        $gameHint = $('.game-hint', $g);\n        TweenMax.fromTo($gameHint, .5, {\n            x: 0,\n            opacity: .5\n        }, {\n            x: 200,\n            ease: Power2.easeInOut,\n            onComplete: function () {\n                setTimeout(function () {\n                    TweenLite.to($gameHint, .5, {\n                        opacity: 0\n                    });\n                }, 500)\n            }\n        });\n\n        TweenMax.fromTo($gameHint, .7, {\n            y: 0,\n        }, {\n            y: -170,\n            ease: Power2.easeInOut\n        });\n    });\n}\n\n\n/*--------------------------------------------------\nDoc Ready\n--------------------------------------------------*/\n$(function () {\n    if ($('#game-1').length) {\n        gameInit1();\n    }\n});\n/*--------------------------------------------------\nGame init 2\n--------------------------------------------------*/\nfunction gameInit2() {\n    var $g = $('#game-2'),\n        tiles = $('.tile', $g),\n        pool = $('#pool', $g),\n        drop = $('#drop', $g),\n        width = 110,\n        margin = 0,\n        gutter = 50,\n        $main = $('main', $g),\n        scale = $main[0].getBoundingClientRect().width / $main[0].offsetWidth,\n        $hint = $('.hint img', $g);\n\n    tiles.each(function (i, tile) {\n        tile = $(tile);\n        tile.data({\n            index: i,\n            zone: pool\n        });\n\n        TweenLite.set(tile, {\n            y: margin,\n            x: margin + i * gutter + (i * width)\n        });\n\n    });\n\n    // Make tiles draggable\n    Draggable.create(tiles, {\n        bounds: $g,\n        onDrag: onDrag,\n        onDragEnd: onDragEnd,\n        onDragStart: onDragStart,\n        onPress: onPress,\n        onRelease: onRelease\n    });\n\n    function onDrag(event) {\n\n        var tile = $(this.target);\n        var zone = getZone(tile);\n\n        // Tile is not in the zone it started from\n        if (zone && zone !== tile.data(\"zone\")) {\n\n            // Stop the draggable so the position doesn't\n            // get messed up when appeneding tile to new zone\n            this.endDrag(event);\n            changeZone(tile, zone);\n            this.startDrag(event);\n        }\n\n        // Reorder tiles. True parameter tells it to ignore \n        // tiles that are being dragged\n        if (!zone) reorderTiles(true);\n        if (hitTest(tile)) reorderTiles();\n\n    }\n\n    function onDragStart() {\n        $(this.target).addClass(\"dragging\");\n    }\n\n    function onDragEnd() {\n\n        var tile = $(this.target);\n        var zone = getZone(tile);\n\n        if (zone && zone !== tile.data(\"zone\")) {\n            changeZone(tile, zone);\n        }\n\n        $(this.target).removeClass(\"dragging\");\n        hitTest(this.target);\n        reorderTiles();\n\n\n    }\n\n    function onPress() {\n        TweenLite.to(this.target, 0.3, {\n            opacity: 0.75,\n            scale: 1.1\n        });\n        TweenMax.to(this.target, 0.2, {\n            transformOrigin: \"50%\",\n            rotation: 4,\n            ease: Power1.easeInOut,\n            onComplete: function () {\n                TweenMax.fromTo(\n                    this.target,\n                    0.4, {\n                        transformOrigin: \"50%\",\n                        rotation: 4,\n                        ease: Power1.easeInOut\n                    }, {\n                        transformOrigin: \"50%\",\n                        rotation: -4,\n                        repeat: -1,\n                        ease: Power1.easeInOut,\n                        yoyo: true\n                    }\n                );\n            }\n        });\n    }\n\n    function onRelease() {\n        hitTest(this.target);\n        reorderTiles();\n        TweenLite.to(this.target, 0.3, {\n            overwrite: 'all',\n            opacity: 1,\n            scale: 1,\n            rotation: 0\n        });\n\n        checkSolution();\n\n    }\n\n    function changeZone(tile, zone) {\n\n        // Change tile's data for zone\n        tile.data(\"zone\", zone);\n\n        // Find position of tile and zone\n        var rect1 = tile[0].getBoundingClientRect();\n        var rect2 = zone[0].getBoundingClientRect();\n\n        zone.append(tile);\n\n        // Update tile with new coords\n        TweenLite.set(tile, {\n            x: (rect1.left - rect2.left) / scale,\n            y: (rect1.top - rect2.top) / scale\n        });\n    }\n\n    function getZone(tile) {\n\n        // Returns the zone the tile is in\n        var zone = Draggable.hitTest(tile, pool) ?\n            pool : Draggable.hitTest(tile, drop) ?\n            drop : null;\n\n        return zone;\n    }\n\n    function hitTest(tile) {\n\n        var target;\n\n        // Hit test tiles that aren't moving or being dragged\n        $(\".tile:not(.dragging, .moving)\").each(function (i, element) {\n\n            if (Draggable.hitTest(tile, element)) {\n                target = element;\n                return false;\n            }\n        });\n\n        if (target) changePosition(tile, target);\n        return target;\n    }\n\n    function reorderTiles(dragging) {\n\n        var query = dragging ? \".tile:not(.dragging)\" : \".tile\";\n\n        if (dragging) {\n            $('.dragging').addClass('hitted');\n        }\n\n        pool.children(query).each(moveTile);\n        drop.children(query).each(moveTile);\n    }\n\n    function moveTile(index, tile, tween) {\n\n        tile = $(tile);\n        tile.data(\"index\", index);\n\n        if (tile.hasClass(\"dragging\")) return;\n        tile.addClass(\"moving\");\n\n        TweenLite.to(tile, 0.25, {\n            y: 0,\n            x: margin + index * gutter + (index * width),\n            onComplete: function () {\n                tile.removeClass(\"moving\");\n            }\n        });\n    }\n\n    function changePosition(tile1, tile2) {\n\n        tile1 = $(tile1);\n        tile2 = $(tile2);\n\n        // Changes tiles position on the DOM which is used to \n        // index and find the position to move to\n        tile1.data(\"index\") > tile2.data(\"index\") ?\n            tile1.insertBefore(tile2) :\n            tile1.insertAfter(tile2);\n\n\n    }\n\n    var Solution = [\n        'circle',\n        'square',\n        'triangle',\n        'diamond'\n    ];\n\n    var end = false;\n\n    function checkSolution() {\n        $('#drop img', $g).each(function (i) {\n\n            var $class = $(this).attr('class');\n            if (i == $.inArray($class, Solution)) {\n                $('.dot', $g).eq(i).addClass('active');\n            } else {\n                $('.dot', $g).eq(i).removeClass('active');\n            }\n        });\n\n        if ($('.dot.active', $g).length == 4) {\n            end = true;\n            setTimeout(function () {\n                $('#item-2 .well-done').addClass('active');\n            }, 500);\n            setTimeout(game3, 2500);\n        } else {\n            end = false;\n        }\n    }\n\n    $hint.on('click', function () {\n\n        $gameHint = $('.game-hint', $g);\n        TweenMax.fromTo($gameHint, .5, {\n            y: 0,\n            opacity: .5\n        }, {\n            y: -239,\n            ease: Power2.easeInOut,\n            onComplete: function () {\n                setTimeout(function () {\n                    TweenLite.to($gameHint, .5, {\n                        opacity: 0\n                    });\n                }, 500)\n            }\n        });\n\n        TweenMax.fromTo($gameHint, .6, {\n            x: 0,\n        }, {\n            x: -340,\n            ease: Power2.easeInOut\n        });\n    });\n}\n/*--------------------------------------------------\nGame init 3\n--------------------------------------------------*/\nfunction tangram(drag, drop) {\n    var $g = $('#game-3'),\n        $drag = drag,\n        $drop = drop,\n        startX = $drag.offset().left,\n        startY = $drag.offset().top,\n        endX = $drop.offset().left,\n        endY = $drop.offset().top,\n        $main = $('main', $g),\n        scale = $main[0].getBoundingClientRect().width / $main[0].offsetWidth,\n        diffX = (endX - startX) / scale,\n        diffY = (endY - startY) / scale;\n\n    Draggable.create($drag, {\n        bounds: $g,\n        onPress: function () {\n            var $t = $(this.target);\n            TweenLite.to(this.target, 0.3, {\n                opacity: 0.75,\n                scale: 1.1\n            });\n            TweenMax.to(this.target, 0.2, {\n                transformOrigin: \"50%\",\n                rotation: 4,\n                ease: Power1.easeInOut,\n                onComplete: function () {\n                    TweenMax.fromTo(\n                        this.target,\n                        0.4, {\n                            transformOrigin: \"50%\",\n                            rotation: 4,\n                            ease: Power1.easeInOut\n                        }, {\n                            transformOrigin: \"50%\",\n                            rotation: -4,\n                            repeat: -1,\n                            ease: Power1.easeInOut,\n                            yoyo: true\n                        }\n                    );\n                }\n            });\n        },\n        onDragEnd: function () {\n            var $t = $(this.target);\n            $t.removeClass('dragging');\n            if (this.hitTest($drop)) {\n                TweenLite.to($t, 0.5, {\n                    x: diffX,\n                    y: diffY,\n                    rotation: 0,\n                    scale: 1,\n                    opacity: 1,\n                    overwrite: 'all',\n                    ease: Power2.easeInOut\n                });\n                $t.addClass('dropped');\n            } else {\n                TweenLite.to($t, 0.5, {\n                    x: 0,\n                    y: 0,\n                    rotation: 0,\n                    scale: 1,\n                    opacity: 1,\n                    overwrite: 'all',\n                    ease: Power2.easeInOut\n                });\n                $t.removeClass('dropped');\n            }\n            checkSolutionGame3();\n        }\n    })\n}\n\n\n$('#game-3').on('click', '.hint img', function () {\n    TweenMax.staggerTo('#game-3 .droppable', .7, {\n        opacity: .3,\n        ease: Power3.easeInOut,\n        onComplete: function () {\n            setTimeout(function () {\n                TweenLite.to('#game-3 .droppable', .5, {\n                    opacity: 0\n                });\n            }, 1000)\n        }\n    }, .08);\n\n});\n\nvar endGame3 = false;\n\nfunction checkSolutionGame3() {\n    $g = $('#game-3');\n    if ($('.tangram .dropped').length == 8) {\n        endGame3 = true;\n        setTimeout(function () {\n            $('#item-3 .well-done').addClass('active');\n        }, 500);\n        setTimeout(game4, 2500);\n    } else {\n        endGame3 = false;\n    }\n}\nblob2 = new Blob();\r\nblob2.radius = 200;\r\nblob2.strokeStyle = '#141414';\r\nvar end = document.getElementById('end');\r\n\r\ninit2 = function init2() {\r\n    canvas = document.createElement('canvas');\r\n    canvas.setAttribute('touch-action', 'none');\r\n\r\n    end.appendChild(canvas);\r\n    canvas.setAttribute('id', 'end-canvas');\r\n\r\n    var resize = function resize() {\r\n        canvas.width = window.innerWidth;\r\n        canvas.height = window.innerHeight;\r\n    };\r\n    window.addEventListener('resize', resize);\r\n    resize();\r\n\r\n    var oldMousePoint = {\r\n        x: 0,\r\n        y: 0\r\n    };\r\n    var hover = false;\r\n    var mouseMove = function mouseMove(e) {\r\n\r\n        var pos = blob2.center;\r\n        var diff = {\r\n            x: e.clientX - pos.x,\r\n            y: e.clientY - pos.y\r\n        };\r\n        var dist = Math.sqrt(diff.x * diff.x + diff.y * diff.y);\r\n        var angle = null;\r\n\r\n        blob2.mousePos = {\r\n            x: pos.x - e.clientX,\r\n            y: pos.y - e.clientY\r\n        };\r\n\r\n        blob2.color = '#fff';\r\n\r\n\r\n        if (dist < blob2.radius && hover === false) {\r\n            var vector = {\r\n                x: e.clientX - pos.x,\r\n                y: e.clientY - pos.y\r\n            };\r\n            angle = Math.atan2(vector.y, vector.x);\r\n            hover = true;\r\n\r\n        } else if (dist > blob2.radius && hover === true) {\r\n            var _vector = {\r\n                x: e.clientX - pos.x,\r\n                y: e.clientY - pos.y\r\n            };\r\n            angle = Math.atan2(_vector.y, _vector.x);\r\n            hover = false;\r\n            blob2.color = null;\r\n        }\r\n\r\n        if (typeof angle == 'number') {\r\n\r\n            var nearestPoint = null;\r\n            var distanceFromPoint = 100;\r\n\r\n            blob2.points.forEach(function (point) {\r\n                if (Math.abs(angle - point.azimuth) < distanceFromPoint) {\r\n                    // console.log(point.azimuth, angle, distanceFromPoint);\r\n                    nearestPoint = point;\r\n                    distanceFromPoint = Math.abs(angle - point.azimuth);\r\n                }\r\n            });\r\n\r\n            if (nearestPoint) {\r\n                var strength = {\r\n                    x: oldMousePoint.x - e.clientX,\r\n                    y: oldMousePoint.y - e.clientY\r\n                };\r\n                strength = Math.sqrt(strength.x * strength.x + strength.y * strength.y) * 10;\r\n                if (strength > 100) strength = 100;\r\n                nearestPoint.acceleration = strength / 100 * (hover ? -1 : 1);\r\n            }\r\n        }\r\n\r\n        oldMousePoint.x = e.clientX;\r\n        oldMousePoint.y = e.clientY;\r\n    };\r\n    // window.addEventListener('mousemove', mouseMove);\r\n    window.addEventListener('pointermove', mouseMove);\r\n\r\n    blob2.canvas = canvas;\r\n    blob2.init();\r\n    blob2.render();\r\n};"]}