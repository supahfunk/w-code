{"version":3,"sources":["dist/js/game.js"],"names":["gameInit1","$g","$","tiles","pool","drop","height","margin","gutter","changeZone","tile","zone","data","rect1","getBoundingClientRect","rect2","append","TweenLite","set","x","left","y","top","getZone","Draggable","hitTest","target","tile1","tile2","each","i","element","insertBefore","insertAfter","reorderTiles","dragging","query","children","moveTile","index","tween","hasClass","addClass","to","onComplete","removeClass","create","bounds","onDrag","event","this","endDrag","startDrag","onDragEnd","onDragStart","onPress","opacity","scale","TweenMax","transformOrigin","rotation","ease","Power1","easeInOut","fromTo","repeat","yoyo","onRelease","overwrite","length","setTimeout","game2","gameInit2","width","$class","attr","inArray","Solution","eq","game3","tangram","drag","$drag","$drop","startX","offset","startY","endX","endY","diffX","diffY","$t","Power2","checkSolutionGame3","endGame3","game4"],"mappings":"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","file":"game.min.js","sourcesContent":["/*--------------------------------------------------\nGame init 1\n--------------------------------------------------*/\nfunction gameInit1() {\n    var $g = $('#game-1'),\n        tiles = $('.tile', $g),\n        pool = $('#pool', $g),\n        drop = $('#drop', $g),\n        height = 110,\n        margin = 0,\n        gutter = 50;\n\n    tiles.each(function (i, tile) {\n\n        // Setup tiles with some data\n        tile = $(tile);\n        tile.data({\n            index: i,\n            zone: pool\n        });\n\n        TweenLite.set(tile, {\n            x: margin,\n            y: margin + i * gutter + (i * height)\n        });\n    });\n\n    // Make tiles draggable\n    Draggable.create(tiles, {\n        bounds: $g,\n        onDrag: onDrag,\n        onDragEnd: onDragEnd,\n        onDragStart: onDragStart,\n        onPress: onPress,\n        onRelease: onRelease\n    });\n\n    function onDrag(event) {\n\n        var tile = $(this.target);\n        var zone = getZone(tile);\n\n        // Tile is not in the zone it started from\n        if (zone && zone !== tile.data(\"zone\")) {\n\n            // Stop the draggable so the position doesn't\n            // get messed up when appeneding tile to new zone\n            this.endDrag(event);\n            changeZone(tile, zone);\n            this.startDrag(event);\n        }\n\n        // Reorder tiles. True parameter tells it to ignore \n        // tiles that are being dragged\n        if (!zone) reorderTiles(true);\n        if (hitTest(tile)) reorderTiles();\n    }\n\n    function onDragStart() {\n        $(this.target).addClass(\"dragging\");\n    }\n\n    function onDragEnd() {\n\n        var tile = $(this.target);\n        var zone = getZone(tile);\n\n        if (zone && zone !== tile.data(\"zone\")) {\n            changeZone(tile, zone);\n        }\n\n        $(this.target).removeClass(\"dragging\");\n        hitTest(this.target);\n        reorderTiles();\n    }\n\n    function onPress() {\n        TweenLite.to(this.target, 0.3, {\n            opacity: 0.75,\n            scale: 1.1\n        });\n        TweenMax.to(this.target, 0.2, {\n            transformOrigin: \"50%\",\n            rotation: 4,\n            ease: Power1.easeInOut,\n            onComplete: function () {\n                TweenMax.fromTo(\n                    this.target,\n                    0.4, {\n                        transformOrigin: \"50%\",\n                        rotation: 4,\n                        ease: Power1.easeInOut\n                    }, {\n                        transformOrigin: \"50%\",\n                        rotation: -4,\n                        repeat: -1,\n                        ease: Power1.easeInOut,\n                        yoyo: true\n                    }\n                );\n            }\n        });\n    }\n\n    function onRelease() {\n        hitTest(this.target);\n        reorderTiles();\n        TweenLite.to(this.target, 0.3, {\n            overwrite: 'all',\n            opacity: 1,\n            scale: 1,\n            rotation: 0\n        });\n\n        checkSolution();\n    }\n\n    function changeZone(tile, zone) {\n\n        // Change tile's data for zone\n        tile.data(\"zone\", zone);\n\n        // Find position of tile and zone\n        var rect1 = tile[0].getBoundingClientRect();\n        var rect2 = zone[0].getBoundingClientRect();\n\n        zone.append(tile);\n\n        // Update tile with new coords\n        TweenLite.set(tile, {\n            x: rect1.left - rect2.left,\n            y: rect1.top - rect2.top\n        });\n    }\n\n    function getZone(tile) {\n\n        // Returns the zone the tile is in\n        var zone = Draggable.hitTest(tile, pool) ?\n            pool : Draggable.hitTest(tile, drop) ?\n            drop : null;\n        return zone;\n    }\n\n    function hitTest(tile) {\n\n        var target;\n\n        // Hit test tiles that aren't moving or being dragged\n        $(\".tile:not(.dragging, .moving)\").each(function (i, element) {\n\n            if (Draggable.hitTest(tile, element)) {\n                target = element;\n                return false;\n            }\n        });\n\n        if (target) changePosition(tile, target);\n        return target;\n    }\n\n    function reorderTiles(dragging) {\n\n        var query = dragging ? \".tile:not(.dragging)\" : \".tile\";\n        pool.children(query).each(moveTile);\n        drop.children(query).each(moveTile);\n    }\n\n    function moveTile(index, tile, tween) {\n\n        tile = $(tile);\n        tile.data(\"index\", index);\n\n        if (tile.hasClass(\"dragging\")) return;\n        tile.addClass(\"moving\");\n\n        TweenLite.to(tile, 0.25, {\n            x: margin,\n            y: margin + index * gutter + (index * height),\n            onComplete: function () {\n                tile.removeClass(\"moving\");\n            }\n        });\n    }\n\n    function changePosition(tile1, tile2) {\n\n        tile1 = $(tile1);\n        tile2 = $(tile2);\n\n        // Changes tiles position on the DOM which is used to \n        // index and find the position to move to\n        tile1.data(\"index\") > tile2.data(\"index\") ?\n            tile1.insertBefore(tile2) :\n            tile1.insertAfter(tile2);\n    }\n\n    var end = false;\n\n    function checkSolution() {\n        if ($('#drop img', $g).length == 3) {\n            end = true;\n            setTimeout(game2, 500);\n        } else {\n            end = false;\n        }\n    }\n}\n\n\n/*--------------------------------------------------\nDoc Ready\n--------------------------------------------------*/\n$(function () {\n    if ($('#game-1').length) {\n        gameInit1();\n    }\n});\n/*--------------------------------------------------\nGame init 2\n--------------------------------------------------*/\nfunction gameInit2() {\n    var $g = $('#game-2'),\n        tiles = $('.tile', $g),\n        pool = $('#pool', $g),\n        drop = $('#drop', $g),\n        width = 110,\n        margin = 0,\n        gutter = 50;\n\n    tiles.each(function (i, tile) {\n        tile = $(tile);\n        tile.data({\n            index: i,\n            zone: pool\n        });\n\n        TweenLite.set(tile, {\n            y: margin,\n            x: margin + i * gutter + (i * width)\n        });\n\n    });\n\n    // Make tiles draggable\n    Draggable.create(tiles, {\n        bounds: $g,\n        onDrag: onDrag,\n        onDragEnd: onDragEnd,\n        onDragStart: onDragStart,\n        onPress: onPress,\n        onRelease: onRelease\n    });\n\n    function onDrag(event) {\n\n        var tile = $(this.target);\n        var zone = getZone(tile);\n\n        // Tile is not in the zone it started from\n        if (zone && zone !== tile.data(\"zone\")) {\n\n            // Stop the draggable so the position doesn't\n            // get messed up when appeneding tile to new zone\n            this.endDrag(event);\n            changeZone(tile, zone);\n            this.startDrag(event);\n        }\n\n        // Reorder tiles. True parameter tells it to ignore \n        // tiles that are being dragged\n        if (!zone) reorderTiles(true);\n        if (hitTest(tile)) reorderTiles();\n\n    }\n\n    function onDragStart() {\n        $(this.target).addClass(\"dragging\");\n    }\n\n    function onDragEnd() {\n\n        var tile = $(this.target);\n        var zone = getZone(tile);\n\n        if (zone && zone !== tile.data(\"zone\")) {\n            changeZone(tile, zone);\n        }\n\n        $(this.target).removeClass(\"dragging\");\n        hitTest(this.target);\n        reorderTiles();\n\n\n    }\n\n    function onPress() {\n        TweenLite.to(this.target, 0.3, {\n            opacity: 0.75,\n            scale: 1.1\n        });\n        TweenMax.to(this.target, 0.2, {\n            transformOrigin: \"50%\",\n            rotation: 4,\n            ease: Power1.easeInOut,\n            onComplete: function () {\n                TweenMax.fromTo(\n                    this.target,\n                    0.4, {\n                        transformOrigin: \"50%\",\n                        rotation: 4,\n                        ease: Power1.easeInOut\n                    }, {\n                        transformOrigin: \"50%\",\n                        rotation: -4,\n                        repeat: -1,\n                        ease: Power1.easeInOut,\n                        yoyo: true\n                    }\n                );\n            }\n        });\n    }\n\n    function onRelease() {\n        hitTest(this.target);\n        reorderTiles();\n        TweenLite.to(this.target, 0.3, {\n            overwrite: 'all',\n            opacity: 1,\n            scale: 1,\n            rotation: 0\n        });\n\n        checkSolution();\n\n    }\n\n    function changeZone(tile, zone) {\n\n        // Change tile's data for zone\n        tile.data(\"zone\", zone);\n\n        // Find position of tile and zone\n        var rect1 = tile[0].getBoundingClientRect();\n        var rect2 = zone[0].getBoundingClientRect();\n\n        zone.append(tile);\n\n        // Update tile with new coords\n        TweenLite.set(tile, {\n            x: rect1.left - rect2.left,\n            y: rect1.top - rect2.top\n        });\n    }\n\n    function getZone(tile) {\n\n        // Returns the zone the tile is in\n        var zone = Draggable.hitTest(tile, pool) ?\n            pool : Draggable.hitTest(tile, drop) ?\n            drop : null;\n\n        return zone;\n    }\n\n    function hitTest(tile) {\n\n        var target;\n\n        // Hit test tiles that aren't moving or being dragged\n        $(\".tile:not(.dragging, .moving)\").each(function (i, element) {\n\n            if (Draggable.hitTest(tile, element)) {\n                target = element;\n                return false;\n            }\n        });\n\n        if (target) changePosition(tile, target);\n        return target;\n    }\n\n    function reorderTiles(dragging) {\n\n        var query = dragging ? \".tile:not(.dragging)\" : \".tile\";\n\n        if (dragging) {\n            $('.dragging').addClass('hitted');\n        }\n\n        pool.children(query).each(moveTile);\n        drop.children(query).each(moveTile);\n    }\n\n    function moveTile(index, tile, tween) {\n\n        tile = $(tile);\n        tile.data(\"index\", index);\n\n        if (tile.hasClass(\"dragging\")) return;\n        tile.addClass(\"moving\");\n\n        TweenLite.to(tile, 0.25, {\n            y: 0,\n            x: margin + index * gutter + (index * width),\n            onComplete: function () {\n                tile.removeClass(\"moving\");\n            }\n        });\n    }\n\n    function changePosition(tile1, tile2) {\n\n        tile1 = $(tile1);\n        tile2 = $(tile2);\n\n        // Changes tiles position on the DOM which is used to \n        // index and find the position to move to\n        tile1.data(\"index\") > tile2.data(\"index\") ?\n            tile1.insertBefore(tile2) :\n            tile1.insertAfter(tile2);\n\n\n    }\n\n    var Solution = [\n        'circle',\n        'square',\n        'triangle',\n        'diamond'\n    ];\n\n    var end = false;\n\n    function checkSolution() {\n        $('#drop img', $g).each(function (i) {\n\n            var $class = $(this).attr('class');\n            if (i == $.inArray($class, Solution)) {\n                $('.dot', $g).eq(i).addClass('active');\n            } else {\n                $('.dot', $g).eq(i).removeClass('active');\n            }\n        });\n\n        if ($('.dot.active', $g).length == 4) {\n            end = true;\n            setTimeout(game3, 500);\n        } else {\n            end = false;\n        }\n    }\n}\n\n\n/*--------------------------------------------------\nDoc Ready\n--------------------------------------------------*/\n$(function () {\n    gameInit2();\n});\n/*--------------------------------------------------\nGame init 3\n--------------------------------------------------*/\nfunction tangram(drag, drop) {\n    var $g = $('#game-3'),\n        $drag = drag,\n        $drop = drop,\n        startX = $drag.offset().left,\n        startY = $drag.offset().top,\n        endX = $drop.offset().left,\n        endY = $drop.offset().top,\n        diffX = endX - startX,\n        diffY = endY - startY;\n\n    Draggable.create($drag, {\n        bounds: $g,\n        onDragStart: function () {\n            var $t = $(this.target);\n            TweenLite.to(this.target, 0.3, {\n                opacity: 0.75,\n                scale: 1.1\n            });\n            TweenMax.to(this.target, 0.2, {\n                transformOrigin: \"50%\",\n                rotation: 4,\n                ease: Power1.easeInOut,\n                onComplete: function () {\n                    TweenMax.fromTo(\n                        this.target,\n                        0.4, {\n                            transformOrigin: \"50%\",\n                            rotation: 4,\n                            ease: Power1.easeInOut\n                        }, {\n                            transformOrigin: \"50%\",\n                            rotation: -4,\n                            repeat: -1,\n                            ease: Power1.easeInOut,\n                            yoyo: true\n                        }\n                    );\n                }\n            });\n        },\n        onDragEnd: function () {\n            var $t = $(this.target);\n            $t.removeClass('dragging');\n            if (this.hitTest($drop)) {\n                TweenLite.to($t, 0.5, {\n                    x: diffX,\n                    y: diffY,\n                    rotation: 0,\n                    scale: 1,\n                    opacity: 1,\n                    overwrite: 'all',\n                    ease: Power2.easeInOut\n                });\n                $t.addClass('dropped');\n            } else {\n                TweenLite.to($t, 0.5, {\n                    x: 0,\n                    y: 0,\n                    rotation: 0,\n                    scale: 1,\n                    opacity: 1,\n                    overwrite: 'all',\n                    ease: Power2.easeInOut\n                });\n                $t.removeClass('dropped');\n            }\n            checkSolutionGame3();\n        }\n    })\n}\n\nvar endGame3 = false;\n\nfunction checkSolutionGame3() {\n    $g = $('#game-3');\n    if ($('.tangram .dropped').length == 8) {\n        endGame3 = true;\n        setTimeout(game4, 500);\n    } else {\n        endGame3 = false;\n    }\n}"]}