{"version":3,"sources":["dist/js/game.js"],"names":["gameInit1","$g","$","tiles","pool","drop","height","margin","gutter","changeZone","tile","zone","data","rect1","getBoundingClientRect","rect2","append","TweenLite","set","x","left","y","top","getZone","Draggable","hitTest","target","tile1","tile2","each","i","element","insertBefore","insertAfter","reorderTiles","dragging","query","children","moveTile","index","tween","hasClass","addClass","to","onComplete","removeClass","create","bounds","onDrag","event","this","endDrag","startDrag","onDragEnd","onDragStart","onPress","opacity","scale","onRelease","length","game2","gameInit2","width","TweenMax","transformOrigin","rotation","ease","Power1","easeInOut","fromTo","repeat","yoyo","overwrite","$class","attr","inArray","Solution","eq","game3","tangram","drag","$drag","$drop","startX","offset","startY","endX","endY","diffX","diffY","$t","Power2","checkSolutionGame3","endGame3","game4"],"mappings":"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","file":"game.min.js","sourcesContent":["/*--------------------------------------------------\r\nGame init 1\r\n--------------------------------------------------*/\r\nfunction gameInit1() {\r\n    var $g = $('#game-1'),\r\n        tiles = $('.tile', $g),\r\n        pool = $('#pool', $g),\r\n        drop = $('#drop', $g),\r\n        height = 110,\r\n        margin = 0,\r\n        gutter = 50;\r\n\r\n    tiles.each(function (i, tile) {\r\n\r\n        // Setup tiles with some data\r\n        tile = $(tile);\r\n        tile.data({\r\n            index: i,\r\n            zone: pool\r\n        });\r\n\r\n        TweenLite.set(tile, {\r\n            x: margin,\r\n            y: margin + i * gutter + (i * height)\r\n        });\r\n    });\r\n\r\n    // Make tiles draggable\r\n    Draggable.create(tiles, {\r\n        bounds: $g,\r\n        onDrag: onDrag,\r\n        onDragEnd: onDragEnd,\r\n        onDragStart: onDragStart,\r\n        onPress: onPress,\r\n        onRelease: onRelease\r\n    });\r\n\r\n    function onDrag(event) {\r\n\r\n        var tile = $(this.target);\r\n        var zone = getZone(tile);\r\n\r\n        // Tile is not in the zone it started from\r\n        if (zone && zone !== tile.data(\"zone\")) {\r\n\r\n            // Stop the draggable so the position doesn't\r\n            // get messed up when appeneding tile to new zone\r\n            this.endDrag(event);\r\n            changeZone(tile, zone);\r\n            this.startDrag(event);\r\n        }\r\n\r\n        // Reorder tiles. True parameter tells it to ignore \r\n        // tiles that are being dragged\r\n        if (!zone) reorderTiles(true);\r\n        if (hitTest(tile)) reorderTiles();\r\n    }\r\n\r\n    function onDragStart() {\r\n        $(this.target).addClass(\"dragging\");\r\n    }\r\n\r\n    function onDragEnd() {\r\n\r\n        var tile = $(this.target);\r\n        var zone = getZone(tile);\r\n\r\n        if (zone && zone !== tile.data(\"zone\")) {\r\n            changeZone(tile, zone);\r\n        }\r\n\r\n        $(this.target).removeClass(\"dragging\");\r\n        hitTest(this.target);\r\n        reorderTiles();\r\n    }\r\n\r\n    function onPress() {\r\n        TweenLite.to(this.target, 0.3, {\r\n            opacity: 0.75,\r\n            scale: 0.9\r\n        });\r\n    }\r\n\r\n    function onRelease() {\r\n        hitTest(this.target);\r\n        reorderTiles();\r\n        TweenLite.to(this.target, 0.3, {\r\n            opacity: 1,\r\n            scale: 1\r\n        });\r\n\r\n        checkSolution();\r\n    }\r\n\r\n    function changeZone(tile, zone) {\r\n\r\n        // Change tile's data for zone\r\n        tile.data(\"zone\", zone);\r\n\r\n        // Find position of tile and zone\r\n        var rect1 = tile[0].getBoundingClientRect();\r\n        var rect2 = zone[0].getBoundingClientRect();\r\n\r\n        zone.append(tile);\r\n\r\n        // Update tile with new coords\r\n        TweenLite.set(tile, {\r\n            x: rect1.left - rect2.left,\r\n            y: rect1.top - rect2.top\r\n        });\r\n    }\r\n\r\n    function getZone(tile) {\r\n\r\n        // Returns the zone the tile is in\r\n        var zone = Draggable.hitTest(tile, pool) ?\r\n            pool : Draggable.hitTest(tile, drop) ?\r\n            drop : null;\r\n        return zone;\r\n    }\r\n\r\n    function hitTest(tile) {\r\n\r\n        var target;\r\n\r\n        // Hit test tiles that aren't moving or being dragged\r\n        $(\".tile:not(.dragging, .moving)\").each(function (i, element) {\r\n\r\n            if (Draggable.hitTest(tile, element)) {\r\n                target = element;\r\n                return false;\r\n            }\r\n        });\r\n\r\n        if (target) changePosition(tile, target);\r\n        return target;\r\n    }\r\n\r\n    function reorderTiles(dragging) {\r\n\r\n        var query = dragging ? \".tile:not(.dragging)\" : \".tile\";\r\n        pool.children(query).each(moveTile);\r\n        drop.children(query).each(moveTile);\r\n    }\r\n\r\n    function moveTile(index, tile, tween) {\r\n\r\n        tile = $(tile);\r\n        tile.data(\"index\", index);\r\n\r\n        if (tile.hasClass(\"dragging\")) return;\r\n        tile.addClass(\"moving\");\r\n\r\n        TweenLite.to(tile, 0.25, {\r\n            x: margin,\r\n            y: margin + index * gutter + (index * height),\r\n            onComplete: function () {\r\n                tile.removeClass(\"moving\");\r\n            }\r\n        });\r\n    }\r\n\r\n    function changePosition(tile1, tile2) {\r\n\r\n        tile1 = $(tile1);\r\n        tile2 = $(tile2);\r\n\r\n        // Changes tiles position on the DOM which is used to \r\n        // index and find the position to move to\r\n        tile1.data(\"index\") > tile2.data(\"index\") ?\r\n            tile1.insertBefore(tile2) :\r\n            tile1.insertAfter(tile2);\r\n    }\r\n\r\n    var end = false;\r\n\r\n    function checkSolution() {\r\n        if ($('#drop img', $g).length == 3) {\r\n            end = true;\r\n            game2();\r\n        } else {\r\n            end = false;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/*--------------------------------------------------\r\nDoc Ready\r\n--------------------------------------------------*/\r\n$(function () {\r\n    if ($('#game-1').length) {\r\n        gameInit1();\r\n    }\r\n});\n/*--------------------------------------------------\r\nGame init 2\r\n--------------------------------------------------*/\r\nfunction gameInit2() {\r\n    var $g = $('#game-2'),\r\n        tiles = $('.tile', $g),\r\n        pool = $('#pool', $g),\r\n        drop = $('#drop', $g),\r\n        width = 110,\r\n        margin = 0,\r\n        gutter = 50;\r\n\r\n    tiles.each(function (i, tile) {\r\n        tile = $(tile);\r\n        tile.data({\r\n            index: i,\r\n            zone: pool\r\n        });\r\n\r\n        TweenLite.set(tile, {\r\n            y: margin,\r\n            x: margin + i * gutter + (i * width)\r\n        });\r\n\r\n    });\r\n\r\n    // Make tiles draggable\r\n    Draggable.create(tiles, {\r\n        bounds: $g,\r\n        onDrag: onDrag,\r\n        onDragEnd: onDragEnd,\r\n        onDragStart: onDragStart,\r\n        onPress: onPress,\r\n        onRelease: onRelease\r\n    });\r\n\r\n    function onDrag(event) {\r\n\r\n        var tile = $(this.target);\r\n        var zone = getZone(tile);\r\n\r\n        // Tile is not in the zone it started from\r\n        if (zone && zone !== tile.data(\"zone\")) {\r\n\r\n            // Stop the draggable so the position doesn't\r\n            // get messed up when appeneding tile to new zone\r\n            this.endDrag(event);\r\n            changeZone(tile, zone);\r\n            this.startDrag(event);\r\n        }\r\n\r\n        // Reorder tiles. True parameter tells it to ignore \r\n        // tiles that are being dragged\r\n        if (!zone) reorderTiles(true);\r\n        if (hitTest(tile)) reorderTiles();\r\n\r\n    }\r\n\r\n    function onDragStart() {\r\n        $(this.target).addClass(\"dragging\");\r\n    }\r\n\r\n    function onDragEnd() {\r\n\r\n        var tile = $(this.target);\r\n        var zone = getZone(tile);\r\n\r\n        if (zone && zone !== tile.data(\"zone\")) {\r\n            changeZone(tile, zone);\r\n        }\r\n\r\n        $(this.target).removeClass(\"dragging\");\r\n        hitTest(this.target);\r\n        reorderTiles();\r\n\r\n\r\n    }\r\n\r\n    function onPress() {\r\n        TweenLite.to(this.target, 0.3, {\r\n            opacity: 0.75,\r\n            scale: 1.1\r\n        });\r\n        TweenMax.to(this.target, 0.2, {\r\n            transformOrigin: \"50%\",\r\n            rotation: 4,\r\n            ease: Power1.easeInOut,\r\n            onComplete: function () {\r\n                TweenMax.fromTo(\r\n                    this.target,\r\n                    0.4, {\r\n                        transformOrigin: \"50%\",\r\n                        rotation: 4,\r\n                        ease: Power1.easeInOut\r\n                    }, {\r\n                        transformOrigin: \"50%\",\r\n                        rotation: -4,\r\n                        repeat: -1,\r\n                        ease: Power1.easeInOut,\r\n                        yoyo: true\r\n                    }\r\n                );\r\n            }\r\n        });\r\n    }\r\n\r\n    function onRelease() {\r\n        hitTest(this.target);\r\n        reorderTiles();\r\n        TweenLite.to(this.target, 0.3, {\r\n            overwrite: 'all',\r\n            opacity: 1,\r\n            scale: 1,\r\n            rotation: 0\r\n        });\r\n\r\n        checkSolution();\r\n\r\n    }\r\n\r\n    function changeZone(tile, zone) {\r\n\r\n        // Change tile's data for zone\r\n        tile.data(\"zone\", zone);\r\n\r\n        // Find position of tile and zone\r\n        var rect1 = tile[0].getBoundingClientRect();\r\n        var rect2 = zone[0].getBoundingClientRect();\r\n\r\n        zone.append(tile);\r\n\r\n        // Update tile with new coords\r\n        TweenLite.set(tile, {\r\n            x: rect1.left - rect2.left,\r\n            y: rect1.top - rect2.top\r\n        });\r\n    }\r\n\r\n    function getZone(tile) {\r\n\r\n        // Returns the zone the tile is in\r\n        var zone = Draggable.hitTest(tile, pool) ?\r\n            pool : Draggable.hitTest(tile, drop) ?\r\n            drop : null;\r\n\r\n        return zone;\r\n    }\r\n\r\n    function hitTest(tile) {\r\n\r\n        var target;\r\n\r\n        // Hit test tiles that aren't moving or being dragged\r\n        $(\".tile:not(.dragging, .moving)\").each(function (i, element) {\r\n\r\n            if (Draggable.hitTest(tile, element)) {\r\n                target = element;\r\n                return false;\r\n            }\r\n        });\r\n\r\n        if (target) changePosition(tile, target);\r\n        return target;\r\n    }\r\n\r\n    function reorderTiles(dragging) {\r\n\r\n        var query = dragging ? \".tile:not(.dragging)\" : \".tile\";\r\n\r\n        if (dragging) {\r\n            $('.dragging').addClass('hitted');\r\n        }\r\n\r\n        pool.children(query).each(moveTile);\r\n        drop.children(query).each(moveTile);\r\n    }\r\n\r\n    function moveTile(index, tile, tween) {\r\n\r\n        tile = $(tile);\r\n        tile.data(\"index\", index);\r\n\r\n        if (tile.hasClass(\"dragging\")) return;\r\n        tile.addClass(\"moving\");\r\n\r\n        TweenLite.to(tile, 0.25, {\r\n            y: 0,\r\n            x: margin + index * gutter + (index * width),\r\n            onComplete: function () {\r\n                tile.removeClass(\"moving\");\r\n            }\r\n        });\r\n    }\r\n\r\n    function changePosition(tile1, tile2) {\r\n\r\n        tile1 = $(tile1);\r\n        tile2 = $(tile2);\r\n\r\n        // Changes tiles position on the DOM which is used to \r\n        // index and find the position to move to\r\n        tile1.data(\"index\") > tile2.data(\"index\") ?\r\n            tile1.insertBefore(tile2) :\r\n            tile1.insertAfter(tile2);\r\n\r\n\r\n    }\r\n\r\n    var Solution = [\r\n        'circle',\r\n        'square',\r\n        'triangle',\r\n        'diamond'\r\n    ];\r\n\r\n    var end = false;\r\n\r\n    function checkSolution() {\r\n        $('#drop img', $g).each(function (i) {\r\n\r\n            var $class = $(this).attr('class');\r\n            if (i == $.inArray($class, Solution)) {\r\n                $('.dot', $g).eq(i).addClass('active');\r\n            } else {\r\n                $('.dot', $g).eq(i).removeClass('active');\r\n            }\r\n        });\r\n\r\n        if ($('.dot.active', $g).length == 4) {\r\n            end = true;\r\n            game3();\r\n        } else {\r\n            end = false;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/*--------------------------------------------------\r\nDoc Ready\r\n--------------------------------------------------*/\r\n$(function () {\r\n    gameInit2();\r\n});\n/*--------------------------------------------------\r\nGame init 3\r\n--------------------------------------------------*/\r\nfunction tangram(drag, drop) {\r\n    var $g = $('#game-3'),\r\n        $drag = drag,\r\n        $drop = drop,\r\n        startX = $drag.offset().left,\r\n        startY = $drag.offset().top,\r\n        endX = $drop.offset().left,\r\n        endY = $drop.offset().top,\r\n        diffX = endX - startX,\r\n        diffY = endY - startY;\r\n\r\n    Draggable.create($drag, {\r\n        bounds: $g,\r\n        onDragStart: function () {\r\n            var $t = $(this.target);\r\n            TweenLite.to(this.target, 0.3, {\r\n                opacity: 0.75,\r\n                scale: 1.1\r\n            });\r\n            TweenMax.to(this.target, 0.2, {\r\n                transformOrigin: \"50%\",\r\n                rotation: 4,\r\n                ease: Power1.easeInOut,\r\n                onComplete: function () {\r\n                    TweenMax.fromTo(\r\n                        this.target,\r\n                        0.4, {\r\n                            transformOrigin: \"50%\",\r\n                            rotation: 4,\r\n                            ease: Power1.easeInOut\r\n                        }, {\r\n                            transformOrigin: \"50%\",\r\n                            rotation: -4,\r\n                            repeat: -1,\r\n                            ease: Power1.easeInOut,\r\n                            yoyo: true\r\n                        }\r\n                    );\r\n                }\r\n            });\r\n        },\r\n        onDragEnd: function () {\r\n            var $t = $(this.target);\r\n            $t.removeClass('dragging');\r\n            if (this.hitTest($drop)) {\r\n                TweenLite.to($t, 0.5, {\r\n                    x: diffX,\r\n                    y: diffY,\r\n                    rotation: 0,\r\n                    scale: 1,\r\n                    opacity: 1,\r\n                    overwrite: 'all',\r\n                    ease: Power2.easeInOut\r\n                });\r\n                $t.addClass('dropped');\r\n            } else {\r\n                TweenLite.to($t, 0.5, {\r\n                    x: 0,\r\n                    y: 0,\r\n                    rotation: 0,\r\n                    scale: 1,\r\n                    opacity: 1,\r\n                    overwrite: 'all',\r\n                    ease: Power2.easeInOut\r\n                });\r\n                $t.removeClass('dropped');\r\n            }\r\n            checkSolutionGame3();\r\n        }\r\n    })\r\n}\r\n\r\nvar endGame3 = false;\r\n\r\nfunction checkSolutionGame3() {\r\n    $g = $('#game-3');\r\n    if ($('.tangram .dropped').length == 8) {\r\n        endGame3 = true;\r\n        game4();\r\n    } else {\r\n        endGame3 = false;\r\n    }\r\n}"]}